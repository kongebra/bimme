rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // getRole returns the value of the role of the user
    // true if it has the role
    // false/null if it doesn't
    function getRole(role) {
      return get(/databases/{database}/documents/users/$(request.auth.uid)).data.roles[role]
    }

    function isSubscriber() {
      return getRole('subscriber') == true;
    }

    function isEditor() {
      return getRole('editor') == true;
    }

    function isAdmin() {
      return getRole('admin') == true;
    }

    function hasAnyRole(roles) {
      return request.resource.data.roles.keys().hasAny(roles) == false;
    }


    // This rule allows anyone on the internet to view, edit, and delete
    // all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // your app will lose access to your Firestore database
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2020, 7, 5);
    }

    match /users/{document} {
      allow read;
      allow create: if hasAnyRole(['admin', 'editor']);
      allow update: if isAdmin();
    }

    match /posts/{document} {
      allow read: if isAdmin();
      allow update: if isEditor();
      allow create, delete: if isAdmin();
    }
  }
}